// First store the plaintext in an array
// Uint8 array - array that holds 8-bit unsigned binary values



const SBox = [
  0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
  0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
  0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
  0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
  0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
  0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
  0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
  0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
  0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
  0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
  0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
  0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
  0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
  0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
  0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
  0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
];



// function to rotate the last 4 bytes of the previous round key
function rotateWord(word) {
    return [word[1], word[2], word[3], word[0]];
  }
  
// function to sub each byte with another byte in the array
function subWord(word) {
return word.map(byte => SBox[byte]);
}

// xor function with key and round constants (^ is xor in javascript) each word is an array of 4 bytes
function xorWords(word1,word2) {
    // val in the current item in the iteration and i is the index
    return word1.map((val,i) => val ^ word2[i])
}

function xtwo(a) {

  // checks that when a left shit is carried out (x2) if the MSB is set to 1 before, complete a modular reduction 
  // with an irreducable polynomial ( XOR with the 1b, otherwise xor with 0 - keeps orignal bits)
  // mask with &FF to keep only the lower 8 bits
  return ((a << 1) ^ ((a & 0x80) ? 0x1b : 0)) & 0xFF;

}
function xthree(a) {
  // add is XOR 
  return (xtwo(a) ^ a) & 0xFF;
  
}

function xnine(a) {
  return (xtwo(xtwo(xtwo(a))) ^ a)& 0xFF;
}

function xeleven(a) {
  return (xtwo(xtwo(xtwo(a))) ^ xthree(a)) & 0xFF;
}

function xthirteen(a) {
  return (xtwo(xtwo(xtwo(a))) ^ xtwo(xtwo(a)) ^ a) & 0xFF;
}

function xfourteen(a) {
  return (xtwo(xtwo(xtwo(a)))  ^ xtwo(xtwo(a)) ^ xtwo(a)) & 0xFF;
}

function mixColumn(column) {
    return [
    xtwo(column[0]) ^ xthree(column[1]) ^ column[2] ^ column[3],
    column[0] ^ xtwo(column[1]) ^ xthree(column[2]) ^ column[3],
    column[0] ^ column[1] ^ xtwo(column[2]) ^ xthree(column[3]),
    xthree(column[0]) ^ column[1] ^ column[2] ^ xtwo(column[3])
  ];

}

function transposePlaintext(matrix) {
  let result = [[],[],[],[]];
  for( i =0; i < 4; i++) {
    for(j =0; j<4; j++) {
      result[j][i] = matrix[i][j];
   }
  }
  return result;
}





function gen_round_keys(key) {
    // function to rotate the last 4 bytes of the previous round key
    function rotateWord(word) {
        return [word[1], word[2], word[3], word[0]];
    }
    
    // function to sub each byte with another byte in the array
    function subWord(word) {
    return word.map(byte => SBox[byte]);
    }

    // constants used per round therefore round dependent variation ee
    const Rcon = [
    0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36
    ];

    const SBox = [
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
    ];

    // Creating the round keys 

    let expandedKeyArr = [];

    // for round 0, we use the original key as the round key

    expandedKeyArr[0] = key.slice(0,4);
    expandedKeyArr[1] = key.slice(4,8);
    expandedKeyArr[2] = key.slice(8,12);
    expandedKeyArr[3] = key.slice(12,16);
    // for round 1 - 10

    for(let i = 4; i < 44; i++) {

    let temp = expandedKeyArr[i-1].slice()
    // every 5th word ( start of the next block of 4 is made non linear ) 
    if( i % 4 === 0) {

        temp = rotateWord(temp);
        temp = subWord(temp);
        temp[0] = temp[0] ^ Rcon[(i / 4) -1];
    }
    expandedKeyArr[i] = expandedKeyArr[i - 4].map((val,j) => val ^ temp[j])

    }

    return expandedKeyArr
}

function AES_encrypt(plaintext,key) {

const expandedKeyArr = gen_round_keys(key)


// AES algo start 

// round 0 

for (let row = 0; row < 4; row++) {
  for (let col = 0; col < 4; col++) {
    plaintext[row][col] ^= expandedKeyArr[col][row];
  }
}




// round 1 - 9

for(let i = 1; i < 10; i++) {

  // sub bytes
  for(let col = 0; col < 4; col++) {
    let word = [plaintext[0][col], plaintext[1][col], plaintext[2][col], plaintext[3][col]];
    let subbedWord = subWord(word);
    for(let row = 0; row < 4; row++) {
      plaintext[row][col] = subbedWord[row];
    }
}

  
  // mix rows 
  for(let k = 0; k < 4; k++) {
    
    for(let l = 0; l < k; l ++) {

     plaintext[k] = rotateWord(plaintext[k]);
    }
  }

  // mix columns 
  for(let m = 0; m < 4; m++) {

    col = mixColumn([plaintext[0][m],plaintext[1][m],plaintext[2][m],plaintext[3][m]]);
    plaintext[0][m] = col[0];
    plaintext[1][m] = col[1];
    plaintext[2][m] = col[2];
    plaintext[3][m] = col[3];
  }

  // add the round key

  for (let row = 0; row < 4; row++) {
  for (let col = 0; col < 4; col++) {
    plaintext[row][col] ^= expandedKeyArr[i*4 + col][row];
  }
}

}

// round 10

// sub bytes
for(let col = 0; col < 4; col++) {
  let word = [plaintext[0][col], plaintext[1][col], plaintext[2][col], plaintext[3][col]];
  let subbedWord = subWord(word);
  for(let row = 0; row < 4; row++) {
    plaintext[row][col] = subbedWord[row];
  }
}


// mix rows 
for(let k = 0; k < 4; k++) {
  
  for(let l = 0; l < k; l ++) {

    plaintext[k] = rotateWord(plaintext[k]);
  }
}
// add the round key

for (let col = 0; col < 4; col++) {
  for (let row = 0; row < 4; row++) {
    plaintext[row][col] ^= expandedKeyArr[10*4 + col][row];
  }
}

  return plaintext
}







 // encrypt private key into chunks
  function chunkAndEncryptRSAKey(privateKeyStr, aesKeyRaw) {

  function flattenMatrix(matrix) {
    return matrix.flat();
  } 

  const encoder = new TextEncoder();
  const bytes = encoder.encode(privateKeyStr);

  const encryptedChunks = [];

  for (let i = 0; i < bytes.length; i += 16) {
      let chunk = bytes.slice(i, i + 16);
      let chunkArr = Array.from(chunk);

      // Pad if less than 16 bytes
      while (chunkArr.length < 16) {
          chunkArr.push(0x00);
      }

      // Convert to 4x4 matrix
      const matrix = [
          [chunkArr[0], chunkArr[4], chunkArr[8],  chunkArr[12]],
          [chunkArr[1], chunkArr[5], chunkArr[9],  chunkArr[13]],
          [chunkArr[2], chunkArr[6], chunkArr[10], chunkArr[14]],
          [chunkArr[3], chunkArr[7], chunkArr[11], chunkArr[15]]
      ];

      let encryptedMatrix = AES_encrypt(matrix, aesKeyRaw);
      encryptedChunks.push(flattenMatrix(encryptedMatrix));
  }
  
  function arrayBufferToBase64(buffer) {
      let binary = '';
      const bytes = new Uint8Array(buffer);
      bytes.forEach(b => binary += String.fromCharCode(b));
      return btoa(binary);
    }

  // Convert each encrypted chunk (array of numbers) to Base64 string
    const encryptedPrivateKeyBase64 = encryptedChunks.map(chunk => {
        return arrayBufferToBase64(new Uint8Array(chunk));
    });
  
  const safeEncryptedPrivateKey = encryptedPrivateKeyBase64.map(element => element.toString());



  return safeEncryptedPrivateKey;
}


 

    

console.log(chunkAndEncryptRSAKey('12345678901234567890',new Uint8Array([
  0x54, 0x68, 0x61, 0x74, 0x73, 0x20, 0x6D, 0x79,
  0x20, 0x4B, 0x75, 0x6E, 0x67, 0x20, 0x46, 0x75
])));
